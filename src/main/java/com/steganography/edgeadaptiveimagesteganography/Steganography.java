package com.steganography.edgeadaptiveimagesteganography;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Merv
 */
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 *
 * @author Merv
 */
public class Steganography extends javax.swing.JFrame {
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JLabel Count;
    private javax.swing.JLabel Destination;
    private javax.swing.JLabel Message1;
    private javax.swing.JLabel Message2;
    private javax.swing.JLabel Source;
    private javax.swing.JLabel Stego;
    private javax.swing.JLabel Title1;
    private javax.swing.JLabel Title2;
    private javax.swing.JTextField dest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea msg1;
    private javax.swing.JTextArea msg2;
    private javax.swing.JTextField src;
    private javax.swing.JTextField stego;
    // End of variables declaration                   

    /**
     * Creates new form Steganography
     */
    public Steganography() {
        initComponents();
    }

    static int LSB(int x) {
        return x % 2;
    }

    static int f(int a, int b) {
        return ((a / 2) + b) % 2;
    }

    static String toBinary(String S) {
        String temp = "";
        for (int i = 0; i < 8 - S.length(); i++) {
            temp += "0";
        }
        temp += S;
        return temp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        Title1 = new javax.swing.JLabel();
        Title2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Source = new javax.swing.JLabel();
        Destination = new javax.swing.JLabel();
        dest = new javax.swing.JTextField();
        src = new javax.swing.JTextField();
        Message1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msg1 = new javax.swing.JTextArea();
        Button1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Stego = new javax.swing.JLabel();
        stego = new javax.swing.JTextField();
        Message2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        msg2 = new javax.swing.JTextArea();
        Button2 = new javax.swing.JButton();
        Count = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("Steganography");
        setPreferredSize(new java.awt.Dimension(400, 650));

        Title1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        Title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title1.setText("Edge Adaptive Image Steganography");

        Title2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Title2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title2.setText("Based on LSB Matching Revisited");

        Source.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Source.setText("Source Image Name : ");

        Destination.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Destination.setText("Destination Image Name : ");

        dest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destActionPerformed(evt);
            }
        });

        Message1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Message1.setText("Message : ");

        msg1.setColumns(20);
        msg1.setRows(5);
        msg1.setAutoscrolls(false);
        msg1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                msg1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                msg1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(msg1);

        Button1.setText("Encrypt");
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Encrypt");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Decrypt");

        Stego.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Stego.setText("Stego Image Name : ");

        Message2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Message2.setText("Message : ");

        msg2.setColumns(20);
        msg2.setEditable(false);
        msg2.setRows(5);
        msg2.setAutoscrolls(false);
        msg2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(msg2);

        Button2.setText("Decrypt");
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });

        Count.setText("0 characters");
        Count.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(Title1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Stego)
                        .addGap(18, 18, 18)
                        .addComponent(stego))
                    .addComponent(Title2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(Button1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Button2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Message2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Message1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Count))
                            .addComponent(Destination, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Source, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(src)
                            .addComponent(dest))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Title2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Source)
                    .addComponent(src, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Destination)
                    .addComponent(dest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Message1)
                    .addComponent(Count))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Button1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Stego)
                    .addComponent(stego, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Message2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Button2)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Steganography");

        pack();
    }// </editor-fold>                        

    private void destActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        try {
            String name1 = stego.getText();
            File file1 = new File(name1);
            if (!file1.exists()) {
                stego.setText("");
                msg2.setText("File Not Found!!!");
            } else {
                BufferedImage gray = ImageIO.read(file1);

                if (gray.getWidth() % 2 == 0) {
                    int[][] img = new int[gray.getWidth()][gray.getHeight()];
                    for (int j = 0; j < gray.getHeight(); j++) {
                        for (int i = 0; i < gray.getWidth(); i++) {
                            img[i][j] = gray.getRGB(i, j) & 0x000000ff;
                        }
                    }

                    int T = img[gray.getWidth() - 1][gray.getHeight() - 1];
                    int M = img[0][gray.getHeight() - 1];

                    String msg = "";
                    int k = 0;

                    for (int j = 0; j < gray.getHeight() - 1; j++) {
                        for (int i = 0; i < gray.getWidth(); i += 2) {
                            if (Math.abs(img[i][j] - img[i + 1][j]) >= T && k < M * 8 && 0 < img[i][j] && 0 < img[i + 1][j] && img[i][j] < 255 && img[i + 1][j] < 255) {
                                int Xi = img[i][j];
                                int Xi1 = img[i + 1][j];
                                int Mi = LSB(Xi);
                                int Mi1 = f(Xi, Xi1);
                                msg += Mi + "" + Mi1;
                                k += 2;
                            }
                        }
                    }

                    byte[] msg_byte = new byte[M];

                    for (int i = 0; i < M; i++) {
                        msg_byte[i] = (byte) Integer.parseInt((msg.substring(i * 8, i * 8 + 8)), 2);
                    }
                    stego.setText("");
                    msg2.setText(new String(msg_byte));

                } else {
                    stego.setText("");
                    msg1.setText("Width of Image must be an EVEN number");
                }
            }
        } catch (IOException e) {
        }
    }                                       

    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        try {
            String name1 = src.getText();
            File file1 = new File(name1);
            if (!file1.exists()) {
                msg1.setText("File Not Found!!!");
            } else {
                BufferedImage gray = ImageIO.read(file1);

                if (gray.getWidth() % 2 == 0) {
                    int[][] img = new int[gray.getWidth()][gray.getHeight()];
                    for (int j = 0; j < gray.getHeight(); j++) {
                        for (int i = 0; i < gray.getWidth(); i++) {
                            img[i][j] = gray.getRGB(i, j) & 0x000000ff;
                        }
                    }

                    String msg = msg1.getText();
                    if (msg.length() > 0) {
                        byte[] msg_byte = msg.getBytes();

                        String M = "";
                        for (int i = 0; i < msg_byte.length; i++) {
                            int t = msg_byte[i];
                            M += toBinary(Integer.toBinaryString(t));
                        }

                        int Mod_EU = 0;
                        int T = 32;

                        while (2 * Mod_EU < (M.length() * 8) && T > 0) {
                            Mod_EU = 0;
                            T--;
                            for (int j = 0; j < gray.getHeight() - 1; j++) {
                                for (int i = 0; i < gray.getWidth(); i += 2) {
                                    if (Math.abs(img[i][j] - img[i + 1][j]) >= T && 0 < img[i][j] && 0 < img[i + 1][j] && img[i][j] < 255 && img[i + 1][j] < 255) {
                                        Mod_EU++;
                                    }
                                }
                            }
                        }
                        System.out.println("T = "+T+"\nEU = "+Mod_EU+"\nM = "+(M.length() * 8));

                        if (T > 0) {
                            int k = 0;

                            for (int j = 0; j < gray.getHeight() - 1; j++) {
                                for (int i = 0; i < gray.getWidth(); i += 2) {
                                    if (Math.abs(img[i][j] - img[i + 1][j]) >= T && k < M.length() && 0 < img[i][j] && 0 < img[i + 1][j] && img[i][j] < 255 && img[i + 1][j] < 255) {
                                        int Mi = M.charAt(k) - 48;
                                        int Mi1 = M.charAt(k + 1) - 48;
                                        int Xi = img[i][j];
                                        int Xi1 = img[i + 1][j];

                                        int _Xi, _Xi1;

                                        if (LSB(Xi) == Mi) {
                                            if (f(Xi, Xi1) == Mi1) {
                                                _Xi = Xi;
                                                _Xi1 = Xi1;
                                            } else {
                                                _Xi = Xi;
                                                _Xi1 = Xi1 + 1;
                                            }
                                        } else {
                                            if (f(Xi - 1, Xi1) == Mi1) {
                                                _Xi = Xi - 1;
                                                _Xi1 = Xi1;
                                            } else {
                                                _Xi = Xi + 1;
                                                _Xi1 = Xi1;
                                            }
                                        }

                                        int k1, k2;

                                        if (_Xi1 > 255 || _Xi > 255) {
                                            k1 = -1;
                                            k2 = -1;

                                            _Xi = _Xi + 4 * k1;
                                            _Xi1 = _Xi1 + 2 * k2;
                                        }

                                        if (_Xi1 < 0 || _Xi < 0) {
                                            k1 = 1;
                                            k2 = 1;

                                            _Xi = _Xi + 4 * k1;
                                            _Xi1 = _Xi1 + 2 * k2;
                                        }

                                        while (Math.abs(_Xi1 - _Xi) < T) {
                                            k1 = 0;
                                            k2 = 1;

                                            _Xi = _Xi + 4 * k1;
                                            _Xi1 = _Xi1 + 2 * k2;

                                            if (_Xi1 > 255 || _Xi > 255) {
                                                k1 = -1;
                                                k2 = -1;

                                                _Xi = _Xi + 4 * k1;
                                                _Xi1 = _Xi1 + 2 * k2;
                                            }

                                            if (_Xi1 < 0 || _Xi < 0) {
                                                k1 = 1;
                                                k2 = 1;

                                                _Xi = _Xi + 4 * k1;
                                                _Xi1 = _Xi1 + 2 * k2;
                                            }
                                        }

                                        img[i][j] = _Xi;
                                        img[i + 1][j] = _Xi1;
                                        k += 2;
                                    }

                                }
                            }

                            for (int j = 0; j < gray.getHeight(); j++) {
                                for (int i = 0; i < gray.getWidth(); i++) {
                                    gray.setRGB(i, j, ((-1 << 24) + (img[i][j] << 16) + (img[i][j] << 8) + (img[i][j])));
                                }
                            }

                            gray.setRGB(gray.getWidth() - 1, gray.getHeight() - 1, (-1 << 24) + ((T << 16) + (T << 8) + (T)));
                            gray.setRGB(0, gray.getHeight() - 1, (-1 << 24) + ((msg.length() << 16) + (msg.length() << 8) + (msg.length())));

                            String name2 = dest.getText();
                            File file2 = new File(name2);
                            ImageIO.write(gray, "gif", file2);
                            Count.setText("0 characters");
                            src.setText("");
                            dest.setText("");
                            msg1.setText("");
                        } else {
                            Count.setText("0 characters");
                            src.setText("");
                            dest.setText("");
                            msg1.setText("Message is too long to be Encrypted\nPlease re-try with a shorter Message or another Image");
                        }
                    } else {
                        msg1.setText("Please type a Message");
                    }
                } else {
                    Count.setText("0 characters");
                    src.setText("");
                    dest.setText("");
                    msg1.setText("Width of Image must be an EVEN number");
                }
            }
        } catch (IOException e) {
        }
    }                                       

    private void msg1KeyTyped(java.awt.event.KeyEvent evt) {                              
        // TODO add your handling code here:
    }                             

    private void msg1KeyReleased(java.awt.event.KeyEvent evt) {                                 
        // TODO add your handling code here:
        int c = msg1.getText().length();
        Count.setText(c + " characters");
        if (c > 255) {
            msg1.setText(msg1.getText().substring(0, 255));
        }
    }                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Steganography().setVisible(true);
            }
        });
    }
}
